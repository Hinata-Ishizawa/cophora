#!/usr/bin/env python

import string
import random
import time
import shutil
import argparse
from utils import spinner

charas = string.ascii_lowercase
channels = ["cophora-forge", "biocophora", "nonToxic"]
w = shutil.get_terminal_size().columns
before_install = ['Collecting package metadata (repodata.json):', 'Solving environment:']
after_install = ['Preparing transaction:', 'Verifying transaction:', 'Executing transaction:', 'Retrieving notices: ...working...']

loading_funcs = []
for b_in in before_install + after_install:
    def create_func(b_in):
        @spinner.runspin(b_in)
        def loading():
            time.sleep(random.randint(5, 20))
        return loading
    loading_funcs.append(create_func(b_in))

def print_header():
    print("#")
    print("# Name", end = (" " * 9))
    print("Version", end = (" " * 8))
    print("Channel")
    print("-" * w)

def packnames(pack_n:int):
    names = []
    for i in range(pack_n):
        l = random.randint(4, 8)
        s = ""
        for j in range(l):
            s += random.choice(charas)
        names.append(s)
    names = sorted(names)
    return(names)

def print_packinfo(name:str):
    print(name, end = (" " * (15 - len(name))))
    major = random.randint(0, 3)
    a = random.randint(1, 2)
    if a == 1:
        minor = random.randint(1, 5)
    else:
        minor = (random.randint(10, 59))
    patch = random.randint(0, 70)
    version = f'{major}.{minor}.{patch:02d}'
    print(version, end = (" " * (15 - len(version))))
    c = random.choice(channels)
    print(c, end = (" " * (15 - len(c))), flush = True)

def install_stat():
    w = shutil.get_terminal_size().columns
    color = '\033[38;5;122m'
    color_reset = '\033[0m'
    time.sleep(0.2)
    for i in range(1, w - 51):
            print("\033[46G", end = "")
            print(f"{color}|" + "#" * i + f"{color_reset}", end = "", flush = True)
            percentage = i * 100 // (w - 52)
            print(" " * (w - 52 - i) + f"{color}| {color_reset}" +  f"{percentage:3d}%", end = "", flush = True)
            a = random.randint(1, 20)
            decay = random.randint(1, 6)
            if a == 1:
                time.sleep(decay / 10)
            else:
                pass
    print()

def climacophora(seconds:int):
    start = time.time()
    end = start + seconds
    print_header()
    while time.time() <= end:
        name = ""
        a = random.randint(4, 8)
        for j in range(a):
            name += random.choice(charas)
        print_packinfo(name)
        install_stat()

def climacophora2(pack_n:int):
    print_header()
    names = packnames(pack_n)
    for name in names:
        print_packinfo(name)
        install_stat()

parser = argparse.ArgumentParser(description="Installing numerous unnecessary packages")
parser.add_argument('-s', '--second', action='store_true', help='installing for the specified amount of time')
parser.add_argument('-l', '--line', action='store_true', help='Installing the specified number of tools')
parser.add_argument('count', type=int, nargs='?', default=10,  help='The amount of packages you install (default: 10)')
args = parser.parse_args()

if __name__ == '__main__':
    if args.second and args.line:
        parser.error('You cannot specify both --second and --line')
    elif not (args.second or args.line):
        args.line = True

    for i in range(len(before_install)):
        func = loading_funcs[i]
        func()

    if args.second:
        climacophora(args.count)
    elif args.line:
        climacophora2(args.count)

    for i in range(len(before_install), len(loading_funcs)):
        func = loading_funcs[i]
        func()